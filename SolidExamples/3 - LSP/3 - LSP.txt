LSP: Liskov Substitution Principle
"Subtypes must be substitutable for their base types."

LSP is the principle that focuses the most on inheritance and polymorphism, as it forces us to carefully structure the hierarchy of base classes.

To avoid confusing LSP with DIP (Dependency Inversion Principle), it's important to remember that LSP explicitly refers to base classes, not interfaces.

LSP is often closely related to OCP (Open/Closed Principle) because violating LSP will likely also result in an OCP violation, as we will see in examples. This is because inheritance establishes an “Is-A” relationship—for instance, a Duck class belongs to a hierarchy if it extends a superclass Bird (Duck Is-A Bird).

Breaking this relationship would lead to:

    - A violation of LSP, since a newly derived class may not be handled correctly at runtime.

    - A violation of OCP, as type checking and/or casting may become necessary to manage incorrect substitutions.
