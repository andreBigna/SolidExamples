DIP: Dependency Inversion Principle
"High-level modules should not depend on low-level modules. Both should depend on abstractions.
Abstractions should not depend upon details. Details should depend upon abstractions."

A properly layered abstraction ensures that modules (or "classes" for simplicity) handle the orchestration of a process, while implementation details remain the responsibility of lower-level modules.

When this principle is violated, high-level modules become tightly coupled with low-level ones, meaning that changes in the low-level modules will likely require modifications at the high level. This tight coupling also reduces reusability, as modules cannot easily be repurposed in other contexts.

To avoid this, software architecture is often layered so that:

    Each layer is responsible for its own concerns (SRP)

    Layers communicate via interfaces (DIP)

Example of Layered Architecture:
				Policy Layer (High-Level) ------> Policy Service Interface
															|
															|
															v
												Mechanism Layer (Mid-Level) ------> Mechanism Service Interface
																								|
																								|
																								v
																					Utility Layer (Low-Level)
	
Key Difference from LSP:

    - DIP is based on interfaces (Has-A relationship)

    - LSP is based on base classes and inheritance (Is-A relationship)
	
